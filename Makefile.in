# Process this file with autoconf to generate the Makefile
# @configure_input@
# Unlike most Makefile.in files in the tree, this is a hand-maintained
# file, and not generated by automake.

# MANIFESTS and prefix must match the value defaulted in starconf.
# FIXME: tie these together, and link with starconf values.
prefix=@prefix@
MANIFESTS=$(prefix)/manifests

# Keep the following in alphabetical order.  We don't actually _have_ to
# include everything here, just enough to imply all the others that we
# really need.  However, it does no harm to include more components than
# minimally necessary.
#
# Targets not to include:
#     No buildsupport targets: 'buildsupport' handles them below.
#     No obsolete components.
ALL_TARGETS = \
	$(MANIFESTS)/agi \
	$(MANIFESTS)/ard \
	$(MANIFESTS)/ast \
	$(MANIFESTS)/astrom \
	$(MANIFESTS)/atl \
	$(MANIFESTS)/atools \
	$(MANIFESTS)/blt \
	$(MANIFESTS)/cat \
	$(MANIFESTS)/ccdpack \
	$(MANIFESTS)/chr \
	$(MANIFESTS)/cnf \
	$(MANIFESTS)/coco \
	$(MANIFESTS)/convert \
	$(MANIFESTS)/cupid \
	$(MANIFESTS)/cvg \
	$(MANIFESTS)/datacube \
	$(MANIFESTS)/daophot \
	$(MANIFESTS)/dipso \
	$(MANIFESTS)/docfind \
	$(MANIFESTS)/echomop \
	$(MANIFESTS)/ems \
	$(MANIFESTS)/erfa \
	$(MANIFESTS)/esp \
	$(MANIFESTS)/extractor \
	$(MANIFESTS)/extreme \
	$(MANIFESTS)/fftw \
	$(MANIFESTS)/fluxes \
	$(MANIFESTS)/figaro \
	$(MANIFESTS)/findcoords \
	$(MANIFESTS)/fio \
	$(MANIFESTS)/gaia \
	$(MANIFESTS)/gks \
	$(MANIFESTS)/gns \
	$(MANIFESTS)/graphpar \
	$(MANIFESTS)/grp \
	$(MANIFESTS)/gsd \
	$(MANIFESTS)/gsl \
	$(MANIFESTS)/gwm \
	$(MANIFESTS)/hds \
	$(MANIFESTS)/hds-v4 \
	$(MANIFESTS)/hds-v5 \
	$(MANIFESTS)/hdstools \
	$(MANIFESTS)/hdstrace \
	$(MANIFESTS)/hlp \
	$(MANIFESTS)/htx \
	$(MANIFESTS)/icl \
	$(MANIFESTS)/idi \
	$(MANIFESTS)/img \
	$(MANIFESTS)/info \
	$(MANIFESTS)/init \
	$(MANIFESTS)/itcl \
	$(MANIFESTS)/kappa \
	$(MANIFESTS)/match \
	$(MANIFESTS)/mers \
	$(MANIFESTS)/messgen \
	$(MANIFESTS)/nbs \
	$(MANIFESTS)/ndf \
	$(MANIFESTS)/ndg \
	$(MANIFESTS)/news \
	$(MANIFESTS)/observe \
	$(MANIFESTS)/one \
	$(MANIFESTS)/pamela \
	$(MANIFESTS)/pal \
	$(MANIFESTS)/par \
	$(MANIFESTS)/period \
	$(MANIFESTS)/pcs \
	$(MANIFESTS)/pda \
	$(MANIFESTS)/pgp \
	$(MANIFESTS)/photom \
	$(MANIFESTS)/pisa \
	$(MANIFESTS)/pongo \
	$(MANIFESTS)/polmap \
	$(MANIFESTS)/polpack \
	$(MANIFESTS)/prm \
	$(MANIFESTS)/psmerge \
	$(MANIFESTS)/psx \
	$(MANIFESTS)/ref \
	$(MANIFESTS)/rv \
	$(MANIFESTS)/sae \
	$(MANIFESTS)/sgs \
	$(MANIFESTS)/shl \
	$(MANIFESTS)/sla \
	$(MANIFESTS)/smurf \
	$(MANIFESTS)/specx \
	$(MANIFESTS)/spt \
	$(MANIFESTS)/sst \
	$(MANIFESTS)/starmem \
	$(MANIFESTS)/surf \
	$(MANIFESTS)/tcl \
	$(MANIFESTS)/tclx \
	$(MANIFESTS)/thr \
	$(MANIFESTS)/tk \
	$(MANIFESTS)/trn \
	$(MANIFESTS)/tsp \
	$(MANIFESTS)/xdisplay \
	$(MANIFESTS)/sc2 \
	$(MANIFESTS)/sc3 \
	$(MANIFESTS)/sc4 \
	$(MANIFESTS)/sc5 \
	$(MANIFESTS)/sc6 \
	$(MANIFESTS)/sc7 \
	$(MANIFESTS)/sc9 \
	$(MANIFESTS)/sc12 \
	$(MANIFESTS)/sc13 \
	$(MANIFESTS)/sc14 \
	$(MANIFESTS)/sc15 \
	$(MANIFESTS)/sc17 \
	$(MANIFESTS)/sc20 \
	$(MANIFESTS)/sc21 \
	$(MANIFESTS)/sc22 \
	$(MANIFESTS)/sg4 \
	$(MANIFESTS)/sg6 \
	$(MANIFESTS)/sg9 \
	$(MANIFESTS)/sgp4 \
	$(MANIFESTS)/sgp16 \
	$(MANIFESTS)/sgp28 \
	$(MANIFESTS)/sgp38 \
	$(MANIFESTS)/ssn3 \
	$(MANIFESTS)/ssn8 \
	$(MANIFESTS)/ssn22 \
	$(MANIFESTS)/ssn64 \
	$(MANIFESTS)/ssn75 \
	$(MANIFESTS)/ssn78 \
	$(MANIFESTS)/sun1 \
	$(MANIFESTS)/sun101 \
	$(MANIFESTS)/sun202 \
	$(MANIFESTS)/sun242 \
	$(MANIFESTS)/sun249 \
	$(MANIFESTS)/sun270


# The other important target is `buildsupport', the dependencies of
# which are defined in the Makefile.dependencies which is included below.



SUBDIRS = @subdirs@
@SET_MAKE@
LN_S=@LN_S@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
GIT = @GIT@

# Java support: need a java runtime.  The Java programs below use the
# jar in $(BUILDSUPPORTCP), which is installed
# as part of the starconf component.
JAVA=@JAVA@

# Location of the buildsupport classes.  This default is generally
# the best one, but we make it configurable so we can override it in
# special circumstances.
BUILDSUPPORTCP=`starconf --show buildsupportjar`

# The RECURSIVE_TARGETS support here is based on the similar support
# generated by automake, but isn't identical.
RECURSIVE_TARGETS = all-recursive check-recursive \
	clean-recursive distclean-recursive maintainer-clean-recursive



all: all-recursive

# Note to track the build we create a world-stamp file with the current date
# and a starlink.version file with the current branch name  (usually master,
# but other names for release branches are possible), the sha1 of the
# last commit which reflects the current state of the checkout and the
# date and time in of that commit in ISO8601 format.
world: $(ALL_TARGETS)
	- if test -d $(prefix)/starjava/docs; then \
	  test -f $(prefix)/bin/hlink \
	    && test -d $(prefix)/docs \
	    && $(prefix)/bin/hlink $(prefix)/docs $(prefix)/help $(prefix)/starjava/docs; \
	else \
	  test -f $(prefix)/bin/hlink \
	    && test -d $(prefix)/docs \
	    && $(prefix)/bin/hlink $(prefix)/docs $(prefix)/help ; \
	fi
	rm -f world-stamp
	date >world-stamp
	$(INSTALL_DATA) world-stamp $(MANIFESTS)/world-stamp
	rm -f starlink.version
	- if test -n "$(GIT)"; then \
	   $(GIT) branch | grep '^\*' | sed 's,\* ,,' > starlink.version; \
	   $(GIT) rev-parse --verify HEAD >> starlink.version; \
	   $(GIT) log -n 1 HEAD --pretty=format:%cd --date=iso >> starlink.version; \
	   echo >> starlink.version; \
	   $(INSTALL_DATA) starlink.version $(MANIFESTS)/starlink.version; \
	fi

# Avoid doing anything if the variable JAVA is NOJAVA -- this is true if
# we're using this file unconfigured during bootstrap (see ./bootstrap
# for the relevant gymnastics).
#
# It might seem like a good idea to create a set of dependencies for
# componentset.xml at the same time, saying that it depends on all the
# component.xml files beneath it in the tree.  It's a bad idea,
# however, since it means that the Makefile can be used only if the
# entire tree is checked out.  If we only check out part of the tree,
# because we only want to build one component, then any make at the
# top level will fail because one or other of the dependencies of
# componentset.xml is missing.  This is also why individual
# component.xml files are checked in to the repository, since this
# allows compenentset.xml to be built without the component.xml files
# being configured.  This, finally, is why we do not declare that
# Makefile.dependencies depends on componentset.xml, and have a
# separate rule for the latter: we can't express any componentset.xml
# dependencies, so once it exists, it wouldn't be updated.
#
# We make the componentset.xml by concatenating all the component.xml
# files we can find.  Sort the list of files to make the order
# deterministic.  The removal of the DOCTYPE lines and PIs is
# admittedly lame, but good enough for the moment.
#
# componentset.xml `really' depends on all the component.xml files
# below it, but don't state this, for the reason explained above.
# If you add a component or changes a component's dependencies,
# then delete Makefile.dependencies here and remake it.
#
# The test of whether $(JAVA) is NOJAVA is important.  An edited
# version of this file is used by the ./bootstrap script, in which the
# JAVA variable is set to NOJAVA (since the directory may not have been
# configured yet); we must not fail in this case.  In this case simply
# do nothing, because the Makefile.dependencies file can be assumed to
# be up-to-date.
#
# If $(JAVA) is NOJAVA and Makefile.dependencies does not exist,
# then what is happening is that the user has deleted
# Makefile.dependencies in order to remake it, but they don't have a
# java binary on their path.  Oh dear.  Just touching the file isn't
# any use here, so fail noisily, and tell the user what they need to do.
#
# if $(JAVA) is NOJAVA and Makefile.dependencies does exist, then
# we're puzzled, because we probably shouldn't be executing this
# rule.  Clearly, `make' has gone mad.  In this case, simply touch
# Makefile.dependencies, since that should at least stop this
# happening again, and hope this turns into someone else's problem.
#
# The hole in the logic below is where we have an unconfigured tree
# (ie, buildsupport/starconf has not been installed) _and_ no
# Makefile.dependencies.  Since the latter is checked into the
# repository, this can only mean that someone is playing
# silly-buggers, and we're stuck.  The error message should cover
# that case, too.
#
Makefile.dependencies componentset-extrainfo.xml componentset.xml:
	rm -f componentset.xml Makefile.dependencies Makefile.dependencies.tmp
	exec 5>componentset.xml; \
	  echo '<?xml version="1.0"?>' >&5; \
	  echo '<!-- DTD in buildsupport/starconf/componentinfo.dtd -->' >&5; \
	  echo '<componentset>' >&5; \
	  find . -name component.xml | sort | \
	    { while read c; do cat $$c; done } | \
	    sed '/^<?/d;/^<!DOCTYPE/d;/^ *<!--.*--> *$$/d' >&5; \
	  echo '</componentset>' >&5
	if test "$(JAVA)" != NOJAVA; then \
	  $(JAVA) -classpath $(BUILDSUPPORTCP) \
	        GenerateDependencies \
	        --makefile=Makefile.dependencies.tmp \
		--flatdeps=componentset-extrainfo.xml \
		componentset.xml \
	  && mv Makefile.dependencies.tmp Makefile.dependencies; \
	elif test -f $@; then \
	  touch $@; \
	else \
	  echo "You are remaking Makefile.dependencies (yes?)."; \
	  echo "To do this, you must have java in your path."; \
	  echo "(and the starconf component must be installed, as the"; \
	  echo "result of a tree-wide bootstrap).  Either call:"; \
	  echo "  make JAVA=/path/to/java Makefile.dependencies"; \
	  echo "or edit PATH appropriately, run"; \
	  echo "  ./configure --no-recursion"; \
	  echo "and then remake Makefile.dependencies"; \
	  false; \
	fi

# Create the componentset.html summary of the componentset.xml file.
# Depends on Makefile.dependencies => componentset.xml.
# Probably only used by USSC maintainer, so limited error recovery.
componentset.html: componentset.xml
	test $(JAVA) != NOJAVA -a -f componentset.xml
	$(JAVA) -classpath $(BUILDSUPPORTCP) \
	  Transformer componentset.xml \
	    buildsupport/misc/summarise-components.xslt $@
	if test -d $(prefix)/docs; then \
		cp componentset.html $(prefix)/docs/starlinksummary.html && \
		cp buildsupport/misc/starlinksummary.css $(prefix)/docs/starlinksummary.css; \
	fi


# Make a link to an installed componentinfo.dtd file.  This will not
# work at bootstrap time (so the bootstrap file takes care of this
# link).  It does no harm to have the rule in, just in case this is
# used at some other time.
componentinfo.dtd:
	$(LN_S) `starconf --show buildsupportdata`/componentinfo.dtd componentinfo.dtd

# Makefile.dependencies expresses all the dependencies between components.
# It expects the current file to define variable MANIFESTS to be the directory
# which holds the manifest files, typically /star/manifests
#
# As well as defining each of the manifest targets, this
# file also defines the following targets:
#   buildsupport:       build each of the buildsupport tools
#   clean-buildsupport: clean the buildsupport tools
#   configure-deps:     build the set of components which
#                       must be built before ./configure
#
# See the Makefile.dependencies target above.
include Makefile.dependencies

# Add extra dependencies on starconf, to ensure that ./configure and
# install-sh are present before we attempt to configure it.
$(MANIFESTS)/starconf: buildsupport/starconf/configure

buildsupport/starconf/configure: $(MANIFESTS)/automake $(MANIFESTS)/autoconf
	cd buildsupport/starconf && autoreconf --install --symlink --verbose

# Disable `make install' from this directory
install install-manifest:
	@ echo "To install a component, go to its directory and type"
	@ echo "  'make install' there.  Or delete its manifest from"
	@ echo "  $(MANIFESTS), and make $(MANIFESTS)/<component-name>".
	@ echo "To install the whole tree, type 'make world'."

clean: clean-recursive

check: check-recursive

# This list is taken from the list generated by automake when it makes
# a Makefile.in, namely $(am__CONFIG_DISTCLEAN_FILES)
CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
	configure.lineno configure.status.lineno

distclean: distclean-recursive
	-rm -f $(CONFIG_DISTCLEAN_FILES)
	-rm -f Makefile

maintainer-clean: maintainer-clean-recursive
	-rm -f $(CONFIG_DISTCLEAN_FILES)
	-rm -rf autom4te.cache
	-rm -f Makefile

$(RECURSIVE_TARGETS):
	for d in $(SUBDIRS); do \
	    if test "$$d" = . ; then \
		echo "Omitting recursive make of current directory"; \
	    else \
		target=`echo $@ | sed s/-recursive//`; \
		(cd $$d && $(MAKE) $$target); \
	    fi; \
	done
